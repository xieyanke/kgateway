// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// TLSApplyConfiguration represents a declarative configuration of the TLS type for use
// with apply.
type TLSApplyConfiguration struct {
	SecretRef            *v1.LocalObjectReference      `json:"secretRef,omitempty"`
	TLSFiles             *TLSFilesApplyConfiguration   `json:"tlsFiles,omitempty"`
	InsecureSkipVerify   *bool                         `json:"insecureSkipVerify,omitempty"`
	Sni                  *string                       `json:"sni,omitempty"`
	VerifySubjectAltName []string                      `json:"verifySubjectAltName,omitempty"`
	Parameters           *ParametersApplyConfiguration `json:"parameters,omitempty"`
	AlpnProtocols        []string                      `json:"alpnProtocols,omitempty"`
	AllowRenegotiation   *bool                         `json:"allowRenegotiation,omitempty"`
	OneWayTLS            *bool                         `json:"oneWayTLS,omitempty"`
}

// TLSApplyConfiguration constructs a declarative configuration of the TLS type for use with
// apply.
func TLS() *TLSApplyConfiguration {
	return &TLSApplyConfiguration{}
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithSecretRef(value v1.LocalObjectReference) *TLSApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithTLSFiles sets the TLSFiles field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSFiles field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithTLSFiles(value *TLSFilesApplyConfiguration) *TLSApplyConfiguration {
	b.TLSFiles = value
	return b
}

// WithInsecureSkipVerify sets the InsecureSkipVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipVerify field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithInsecureSkipVerify(value bool) *TLSApplyConfiguration {
	b.InsecureSkipVerify = &value
	return b
}

// WithSni sets the Sni field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sni field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithSni(value string) *TLSApplyConfiguration {
	b.Sni = &value
	return b
}

// WithVerifySubjectAltName adds the given value to the VerifySubjectAltName field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VerifySubjectAltName field.
func (b *TLSApplyConfiguration) WithVerifySubjectAltName(values ...string) *TLSApplyConfiguration {
	for i := range values {
		b.VerifySubjectAltName = append(b.VerifySubjectAltName, values[i])
	}
	return b
}

// WithParameters sets the Parameters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parameters field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithParameters(value *ParametersApplyConfiguration) *TLSApplyConfiguration {
	b.Parameters = value
	return b
}

// WithAlpnProtocols adds the given value to the AlpnProtocols field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AlpnProtocols field.
func (b *TLSApplyConfiguration) WithAlpnProtocols(values ...string) *TLSApplyConfiguration {
	for i := range values {
		b.AlpnProtocols = append(b.AlpnProtocols, values[i])
	}
	return b
}

// WithAllowRenegotiation sets the AllowRenegotiation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowRenegotiation field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithAllowRenegotiation(value bool) *TLSApplyConfiguration {
	b.AllowRenegotiation = &value
	return b
}

// WithOneWayTLS sets the OneWayTLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OneWayTLS field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithOneWayTLS(value bool) *TLSApplyConfiguration {
	b.OneWayTLS = &value
	return b
}

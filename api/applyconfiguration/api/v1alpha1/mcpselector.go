// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// McpSelectorApplyConfiguration represents a declarative configuration of the McpSelector type for use
// with apply.
type McpSelectorApplyConfiguration struct {
	NamespaceSelector *v1.LabelSelectorApplyConfiguration `json:"namespaceSelector,omitempty"`
	ServiceSelector   *v1.LabelSelectorApplyConfiguration `json:"serviceSelector,omitempty"`
}

// McpSelectorApplyConfiguration constructs a declarative configuration of the McpSelector type for use with
// apply.
func McpSelector() *McpSelectorApplyConfiguration {
	return &McpSelectorApplyConfiguration{}
}

// WithNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespaceSelector field is set to the value of the last call.
func (b *McpSelectorApplyConfiguration) WithNamespaceSelector(value *v1.LabelSelectorApplyConfiguration) *McpSelectorApplyConfiguration {
	b.NamespaceSelector = value
	return b
}

// WithServiceSelector sets the ServiceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceSelector field is set to the value of the last call.
func (b *McpSelectorApplyConfiguration) WithServiceSelector(value *v1.LabelSelectorApplyConfiguration) *McpSelectorApplyConfiguration {
	b.ServiceSelector = value
	return b
}

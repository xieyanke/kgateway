// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// MCPApplyConfiguration represents a declarative configuration of the MCP type for use
// with apply.
type MCPApplyConfiguration struct {
	Name    *string                               `json:"name,omitempty"`
	Targets []McpTargetSelectorApplyConfiguration `json:"targets,omitempty"`
}

// MCPApplyConfiguration constructs a declarative configuration of the MCP type for use with
// apply.
func MCP() *MCPApplyConfiguration {
	return &MCPApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *MCPApplyConfiguration) WithName(value string) *MCPApplyConfiguration {
	b.Name = &value
	return b
}

// WithTargets adds the given value to the Targets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Targets field.
func (b *MCPApplyConfiguration) WithTargets(values ...*McpTargetSelectorApplyConfiguration) *MCPApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargets")
		}
		b.Targets = append(b.Targets, *values[i])
	}
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ProxyProtocolApplyConfiguration represents a declarative configuration of the ProxyProtocol type for use
// with apply.
type ProxyProtocolApplyConfiguration struct {
	Rules                             []ProxyProtocolRuleApplyConfiguration `json:"rules,omitempty"`
	AllowRequestsWithoutProxyProtocol *bool                                 `json:"allowRequestsWithoutProxyProtocol,omitempty"`
}

// ProxyProtocolApplyConfiguration constructs a declarative configuration of the ProxyProtocol type for use with
// apply.
func ProxyProtocol() *ProxyProtocolApplyConfiguration {
	return &ProxyProtocolApplyConfiguration{}
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *ProxyProtocolApplyConfiguration) WithRules(values ...*ProxyProtocolRuleApplyConfiguration) *ProxyProtocolApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}

// WithAllowRequestsWithoutProxyProtocol sets the AllowRequestsWithoutProxyProtocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowRequestsWithoutProxyProtocol field is set to the value of the last call.
func (b *ProxyProtocolApplyConfiguration) WithAllowRequestsWithoutProxyProtocol(value bool) *ProxyProtocolApplyConfiguration {
	b.AllowRequestsWithoutProxyProtocol = &value
	return b
}
